from aiogram import Router, F, types
from aiogram.filters import Command, or_f
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from motor.core import AgnosticDatabase as MDB
from keyboards import reply_builder

router = Router()



class RegistrationStates(StatesGroup):
    START = State()
    PEOPLE = State()
    REGISTRATION = State()
    ACTION = State()
    LETTER = State()


@router.message(or_f(Command(commands=["/send"]), F.text == "üì© –û—Ç–∫—Ä—ã—Ç–∫–∏"))
@router.message(RegistrationStates.START)
async def letter(message: types.Message, db: MDB, state: FSMContext):
    user = await db.users.find_one({"_id": message.from_user.id})
    if user["status"] == 0 or user["status"]==3:
        await db.users.update_one({"_id": message.from_user.id}, {"$set": {"status": 3}})
        await state.set_state(RegistrationStates.PEOPLE)
        await message.answer(
            "–ü–æ–∫–∞ –≤–∞—Å –Ω–µ –±—ã–ª–æ, –≤–∞–º –ø—Ä–∏—à–ª–∏ —ç—Ç–∏ –æ—Ç–∫—Ä—ã—Ç–∫–∏\!\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç–∏–≤ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∫—É –∫–æ–º–∞–Ω–¥–æ–π /block –∏–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å /unblock\.\n"
            "–õ–∏–±–æ –æ—Ç–≤–µ—Ç—å—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é",
            reply_markup = reply_builder(["‚ùå –ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å", "‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å", "‚Ü™Ô∏è –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å"])
        )
        letter_cursor = db.waitings.find({'receiver_id': message.from_user.id})
        documents = await letter_cursor.to_list(length=None)
        if not documents:
            await message.answer("–¢—É—Ç –ø—É—Å—Ç–æ")
        else:
            await message.answer("üì© –û—Ç–∫—Ä—ã—Ç–∫–∏ \(–æ–Ω–∏ –æ—Ç —Ä–∞–∑–Ω—ã—Ö –ª—é–¥–µ–π\):\n")
            for document in documents:

                if document['reply']:
                    some = await message.bot.copy_message(chat_id=document["receiver_id"],
                                                            from_chat_id=document["sender_id"],
                                                            message_id= document["_id"],
                                                            reply_to_message_id=document["reply"])
                else:
                    some = await message.bot.copy_message(chat_id=document["receiver_id"],
                                                          from_chat_id=document["sender_id"],
                                                          message_id=document["_id"])
                await db.waitings.delete_one({"_id": document["_id"]})
                mess = {"_id": document["_id"],
                        "rec_message_id": some.message_id,
                        "receiver_id": document["receiver_id"],
                        "sender_id": document["sender_id"]}
                await db.conv.insert_one(mess)
    else:
        pattern = {
            "text": (
                "<b>‚òï –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç</b>\n"
                "–õ–∏–±–æ –≤—ã –≤ –ø–æ–∏—Å–∫–µ —Å–æ–±–µ—Å–µ–Ω–ª–Ω–∏–∫–∞ üó£\n"
                "<i>–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /leave –∏–ª–∏ /cancel</i>"
            ),
            "reply_markup": reply_builder("‚ùå –ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å")
        }
        await message.reply(**pattern)

@router.message(RegistrationStates.PEOPLE, F.text == "‚Ü™Ô∏è –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å")
async def register_user(message: types.Message, db: MDB, state: FSMContext):
    await message.answer(
        "–ü–æ–∫–∞ –≤–∞—Å –Ω–µ –±—ã–ª–æ, –≤–∞–º –ø—Ä–∏—à–ª–∏ —ç—Ç–∏ –æ—Ç–∫—Ä—ã—Ç–∫–∏\!\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç–∏–≤ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∫—É –∫–æ–º–∞–Ω–¥–æ–π /block –∏–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å /unblock\.\n"
        "–õ–∏–±–æ –æ—Ç–≤–µ—Ç—å—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é")
    letter_cursor = db.waitings.find({'receiver_id': message.from_user.id})
    documents = await letter_cursor.to_list(length=None)
    if not documents:
        await message.answer("–¢—É—Ç –ø—É—Å—Ç–æ")
    else:
        await message.answer("üì© –û—Ç–∫—Ä—ã—Ç–∫–∏ \(–æ–Ω–∏ –æ—Ç —Ä–∞–∑–Ω—ã—Ö –ª—é–¥–µ–π\):\n")
        for document in documents:
            if document['reply']:
                some = await message.bot.copy_message(chat_id=document["receiver_id"],
                                                      from_chat_id=document["sender_id"],
                                                      message_id=document["_id"],
                                                      reply_to_message_id=document["reply"])
            else:
                some = await message.bot.copy_message(chat_id=document["receiver_id"],
                                                      from_chat_id=document["sender_id"],
                                                      message_id=document["_id"])
            await db.waitings.delete_one({"_id": document["_id"]})
            mess = {"_id": document["_id"],
                    "rec_message_id": some.message_id,
                    "receiver_id": document["receiver_id"],
                    "sender_id": document["sender_id"]}
            await db.conv.insert_one(mess)


@router.message(RegistrationStates.PEOPLE, F.text == "‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å")
async def register_user(message: types.Message, db: MDB, state: FSMContext):
    await state.set_state(RegistrationStates.REGISTRATION)
    # Set the user's state to USERNAME
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è \(standard\_username\):",
                             reply_markup=reply_builder("‚ùå –ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å"))


@router.message(RegistrationStates.PEOPLE)
async def register_user(message: types.Message, db: MDB, state: FSMContext):
    if message.reply_to_message:
        user = await db.users.find_one({"_id": message.from_user.id})
        if message.text == "/block": #–∑–¥–µ—Å—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –±–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—é
            conversation = await db.conv.find_one({"rec_message_id": message.reply_to_message.message_id})
            user = await db.blocked.find_one({"user_id": message.from_user.id})
            if conversation["sender_id"] not in user["block"]:
                await db.blocked.update_one({"user_id": message.from_user.id}, {'$push': {"block": conversation["sender_id"]}})
            await message.reply("–¢–µ–ø–µ—Ä—å, —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ–ø–µ—Ä—å –Ω–µ —Å–º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º –æ—Ç–∫—Ä—ã—Ç–∫–∏")
        elif message.text == "/unblock": #–∑–¥–µ—Å—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—é
            conversation = await db.conv.find_one({"rec_message_id": message.reply_to_message.message_id})
            user = await db.blocked.find_one({"user_id": message.from_user.id})
            if conversation["sender_id"] in user["block"]:
                await db.blocked.update_one({"user_id": message.from_user.id}, {'$pull': {"block": conversation["sender_id"]}})
            await message.reply("–¢–µ–ø–µ—Ä—å —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫—Ä—ã—Ç –∫ –æ–±—â–µ–Ω–∏—é")
        else:
            #–ü—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            query = {"$or": [{"rec_message_id": message.reply_to_message.message_id},
                             {"_id": message.reply_to_message.message_id}]}
            conversation = await db.conv.find_one(query)
            if not conversation:
                await message.reply("–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞, –ª–∏–±–æ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â—ë –Ω–µ –ø—Ä–æ—á–∏—Ç–∞–ª–∏\n")
            else:
                if message.reply_to_message.from_user.id == message.from_user.id:
                #–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ü–µ–ø–æ—á–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    mess = {"_id": message.message_id, "receiver_id": conversation["receiver_id"],
                            "sender_id": conversation["sender_id"], "reply": conversation["rec_message_id"]}
                    receiver_type = await db.allowance.find_one({"user_id": conversation["receiver_id"]},
                                                                {"_id": 0, "user_id": 0})
                    allowed_types = list(receiver_type.keys())
                    allowed_list = list(filter(lambda x: receiver_type[x] == True, allowed_types))
                else:
                    # –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ü–µ–ø–æ—á–∫–∏ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    mess = {"_id": message.message_id, "receiver_id": conversation["sender_id"],
                            "sender_id": conversation["receiver_id"], "reply": conversation["_id"]}
                    receiver_type = await db.allowance.find_one({"user_id": conversation["sender_id"]}, {"_id": 0, "user_id": 0})
                    allowed_types = list(receiver_type.keys())
                    allowed_list = list(filter(lambda x: receiver_type[x] == True, allowed_types))
                #–ü—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                block = await db.blocked.find_one({"user_id": mess["receiver_id"], "block": mess["sender_id"]}, {"_id": 0, "block": 1})
                if block:
                    await message.reply(
                        "–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∞—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª üòï\n"
                        "–ù–∞–ø–∏—à–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                    )
                elif message.content_type in allowed_list:
                    await message.answer("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ, —Ç–µ–ø–µ—Ä—å –∂–¥—ë–º")
                    await db.conv.delete_one({"_id": conversation["_id"]})
                    await db.waitings.insert_one(mess)
                else:
                    await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–∞–∫–æ–π –≤–∏–¥ —Å–æ–æ–±—â–µ–Ω–∏–∏\n"
                                        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ",
                                        reply_markup=reply_builder("‚ùå –ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å"))
                    await message.answer("–í—ã –º–æ–∂–µ—Ç–µ —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è\n"
                                         "—Å —É–∂–µ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–º–∏ –Ω–∏—á–µ–≥–æ —Å–¥–µ–ª–∞—Ç—å –Ω–µ–ª—å–∑—è")
    else:
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏–∫–æ–Ω–∫–∏, –ª–∏–±–æ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ")





@router.message(RegistrationStates.REGISTRATION)
async def registration(message: types.Message, db: MDB, state: FSMContext):
    receiver_name = message.text
    receiver = await db.users.find_one({"username": receiver_name})
    if receiver:

        if not receiver["letter"]:
            await message.reply(
                "–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–µ–π—á–∞—Å –Ω–µ —Ö–æ—á–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è \n"
                "–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–∑–∂–µ üôÉ"
            )
        else:
            block = await db.blocked.find_one({"user_id": receiver["_id"], "block": message.from_user.id}, {"_id": 0, "block": 1})
            if block:
                await message.reply(
                    "–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∞—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª üòï\n"
                    "–ù–∞–ø–∏—à–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                )
            else:
                await state.update_data(user_id=message.from_user.id)
                await state.update_data(receiver_id=receiver["_id"])
                await state.set_state(RegistrationStates.ACTION)
                await message.reply(
                        "*üïä –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∫—Ä—ã—Ç–∫—É, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å, –ª–∏–±–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*",
                        reply_markup=reply_builder(["üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å",
                                                    "üí© –í –±–ª–æ–∫",
                                                    "üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å",
                                                    "‚ùå –ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å"]))
    else:
        await message.reply(
            "–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –∏–ª–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ –≤—ã –Ω–∞–ø–∏—Å–∞–ª–∏ —Å \"@\", –∞ –Ω—É–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ \"–∏–º—è\_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\" \n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –µ—â—ë —Ä–∞–∑"
        )


@router.message(RegistrationStates.ACTION)
async def action(message: types.Message, db: MDB, state: FSMContext):
    action = message.text
    if action == "üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å":
        await message.reply("–•–æ—Ä–æ—à–æ, —Å–ª—É—à–∞—é –≤–∞—Å", reply_markup=reply_builder("‚ùå –ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å"))
        await state.set_state(RegistrationStates.LETTER)
    elif action == "üí© –í –±–ª–æ–∫":
        data = await state.get_data()
        receiver_id = data.get('receiver_id')
        user = await db.blocked.find_one({"user_id": message.from_user.id})
        if receiver_id not in user["block"]:
            await db.blocked.update_one({"user_id": message.from_user.id}, {'$push': {"block": receiver_id}})
        await message.reply("–¢–µ–ø–µ—Ä—å, —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ–ø–µ—Ä—å –Ω–µ —Å–º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º –æ—Ç–∫—Ä—ã—Ç–∫—É", reply_markup=reply_builder("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚û°Ô∏è"))
        await state.clear()
        await state.set_state(RegistrationStates.START)
    elif action == "üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å":
        data = await state.get_data()
        receiver_id = data.get('receiver_id')
        user = await db.blocked.find_one({"user_id": message.from_user.id})
        if receiver_id in user["block"]:
            await db.blocked.update_one({"user_id": message.from_user.id}, {'$pull': {"block": receiver_id } })
        await message.reply("–¢–µ–ø–µ—Ä—å —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫—Ä—ã—Ç –∫ –æ–±—â–µ–Ω–∏—é", reply_markup=reply_builder("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚û°Ô∏è"))
        await state.clear()
        await state.set_state(RegistrationStates.START)
    else:
        await message.reply("–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è")



# Handler for handling message
@router.message(RegistrationStates.LETTER)
async def final(message: types.Message, db: MDB, state: FSMContext):
    data = await state.get_data()
    receiver_id = data.get('receiver_id')
    receiver_type = await db.allowance.find_one({"user_id": receiver_id}, {"_id": 0, "user_id": 0})
    allowed_types = list(receiver_type.keys())
    allowed_list = list(filter(lambda x: receiver_type[x] == True, allowed_types))
    if message.content_type in allowed_list:
        sender_id = message.from_user.id
        mess = {"_id": message.message_id,"receiver_id": receiver_id,"sender_id": sender_id, "reply": 0}
        await db.waitings.insert_one(mess)
        await message.reply(f"–û—Ç–∫—Ä—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞", reply_markup=reply_builder("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚û°Ô∏è"))
        # Finish the registration process by resetting the state
        await state.clear()
        await state.set_state(RegistrationStates.START)
    else:
        await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç " + message.content_type + "\.\n"
                            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ ",
                            reply_markup=reply_builder("‚ùå –ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å"))